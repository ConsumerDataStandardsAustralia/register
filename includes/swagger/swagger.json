{
  "swagger": "2.0",
  "info": {
    "version": "0.5",
    "title": "Consumer Data Right (CDR) Register - Data Holder Discovery API"
  },
  "schemes": [
    "https"
  ],
  "host": "api.discovery.cdr.gov.au",
  "basePath": "/cdr-register/v1",
  "paths": {
    "/register/data-holder-brands": {
      "get": {
        "tags": [
          "DataHolderBrands"
        ],
        "summary": "Get Data Holder Brands from the CDR Register",
        "operationId": "GetDataHolderBrands",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updated-since",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x-v",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResponseRegisterDataHolderBrandList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ResponseErrorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ResponseErrorList"
            }
          }
        }
      }
    },
    "/register/datarecipientbrands/{dataRecipientBrandId}/softwareproducts/{softwareProductId}/SSA": {
      "get": {
        "tags": [
          "SoftwareStatementAssertion"
        ],
        "summary": "Get a Software Statement Assertion (SSA) for a software product on the CDR Register to be used for Dynamic Registration with a Data Holder",
        "operationId": "GetSoftwareStatementAssertion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataRecipientBrandId",
            "in": "path",
            "description": "Unique id for the Accredited Data Recipient Brand that the Software Product is associated with in the CDR Register",
            "required": true,
            "type": "string"
          },
          {
            "name": "softwareProductId",
            "in": "path",
            "description": "Unique id for the Accredited Data Recipient Software Product in the CDR Register",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-v",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ResponseErrorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ResponseErrorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ResponseErrorList"
            }
          }
        }
      }
    },
    "/register/softwareproducts": {
      "get": {
        "tags": [
          "SoftwareProducts"
        ],
        "summary": "Get the metadata (including status) for software products from the CDR Register",
        "operationId": "GetSoftwareProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-v",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareProductList"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ResponseErrorList"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ResponseRegisterDataHolderBrandList": {
      "description": "Response containing a list of Register Data Holder Brand objects",
      "required": [
        "data",
        "links",
        "meta"
      ],
      "type": "object",
      "properties": {
        "data": {
          "description": "Response data for the query",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterDataHolderBrand"
          }
        },
        "links": {
          "$ref": "#/definitions/LinksPaginated"
        },
        "meta": {
          "$ref": "#/definitions/MetaPaginated"
        }
      }
    },
    "RegisterDataHolderBrand": {
      "required": [
        "dataHolderBrandId",
        "brandName",
        "sector",
        "legalEntity",
        "registerStatus",
        "endpointDetail",
        "lastUpdated"
      ],
      "type": "object",
      "properties": {
        "dataHolderBrandId": {
          "type": "string"
        },
        "brandName": {
          "type": "string"
        },
        "sector": {
          "enum": [
            "BANKING"
          ],
          "type": "string"
        },
        "legalEntity": {
          "$ref": "#/definitions/LegalEntityDetail"
        },
        "registerStatus": {
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "REMOVED"
          ],
          "type": "string"
        },
        "endpointDetail": {
          "$ref": "#/definitions/RegisterDataHolderBrandServiceEndpoint"
        },
        "lastUpdated": {
          "description": "The date/time that the Data Holder Brand data was last updated in the Register ",
          "type": "string",
          "format": "date-time",
          "x-cds-type": "DateTimeString"
        }
      }
    },
    "SoftwareProductList": {
      "required": [
        "softwareProducts"
      ],
      "type": "object",
      "properties": {
        "softwareProducts": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/SoftwareProduct"
          }
        }
      }
    },
    "SoftwareProduct": {
      "required": [
        "softwareProductId",
        "softwareProductStatus"
      ],
      "type": "object",
      "properties": {
        "softwareProductId": {
          "description": "Unique id of the software product issued by the CDR Register",
          "type": "string"
        },
        "softwareProductStatus": {
          "description": "Software product status in CDR Register",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "REMOVED"
          ],
          "type": "string"
        }
      }
    },
    "LegalEntityDetail": {
      "description": "The data that is common to all organisations, regardless of the type (e.g. company, trust, partnership, government)",
      "required": [
        "legalEntityId",
        "legalEntityName",
        "registeredCountry"
      ],
      "type": "object",
      "properties": {
        "legalEntityId": {
          "description": "Unique legal name of the organisation",
          "type": "string"
        },
        "legalEntityName": {
          "description": "Unique legal name of the organisation",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Unique registration number (if the company is regitered outside Australia)",
          "type": "string"
        },
        "registrationDate": {
          "format": "date-time",
          "description": "Date of registration (if the company is regitered outside Australia)",
          "type": "string",
          "x-cds-type": "DateString"
        },
        "registeredCountry": {
          "description": "Country of registeration (if the company is regitered outside Australia)",
          "type": "string"
        },
        "abn": {
          "description": "Australian Business Number for the organisation",
          "type": "string"
        },
        "acn": {
          "description": "Australian Company Number for the organisation",
          "type": "string"
        },
        "arbn": {
          "description": "Australian Registered Body Number.  ARBNs are issued to registrable Australian bodies and foreign companies",
          "type": "string"
        },
        "industryCode": {
          "description": "Industry Code for the organisation. [ANZSIC (2006)](http://www.abs.gov.au/anzsic)",
          "type": "string"
        },
        "organisationType": {
          "description": "Legal organisation type",
          "enum": [
            "SOLE_TRADER",
            "COMPANY",
            "PARTNERSHIP",
            "TRUST",
            "GOVERNMENT_ENTITY",
            "OTHER"
          ],
          "type": "string"
        }
      }
    },
    "RegisterDataHolderBrandServiceEndpoint": {
      "description": "Endpoints related to Data Holder Brand services",
      "required": [
        "version",
        "publicBaseUri",
        "resourceBaseUri",
        "infosecBaseUri",
        "websiteUri",
        "authDetail"
      ],
      "type": "object",
      "properties": {
        "version": {
          "description": "The major version of the high level standards. This is not the version of the endpoint or the payload being requested but the version of the overall standards being applied. This version number will be \"v\" followed by the major version of the standards as a positive integer (e.g. v1, v12 or v76)",
          "type": "string"
        },
        "publicBaseUri": {
          "description": "Base URI for the Data Holder's Consumer Data Standard public endpoints",
          "type": "string",
          "x-cds-type": "URIString"
        },
        "resourceBaseUri": {
          "description": "Base URI for the Data Holder's Consumer Data Standard resource endpoints",
          "type": "string",
          "x-cds-type": "URIString"
        },
        "infosecBaseUri": {
          "description": "Base URI for the Data Holder's Consumer Data Standard information security endpoints",
          "type": "string",
          "x-cds-type": "URIString"
        },
        "extensionBaseUri": {
          "description": "Base URI for the Data Holder extension endpoints to the Consumer Data Standard (optional)",
          "type": "string",
          "x-cds-type": "URIString"
        },
        "websiteUri": {
          "description": "Publicly available website or web resource URI",
          "type": "string",
          "x-cds-type": "URIString"
        },
        "authDetail": {
          "type": "array",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/RegisterDataHolderAuth"
          }
        }
      }
    },
    "RegisterDataHolderAuth": {
      "description": "Provides details of authorisation endpoints for Data Holders",
      "type": "object",
      "required": [
        "registerUType",
        "jwksEndpoint"
      ],
      "properties": {
        "registerUType": {
          "type": "string",
          "description": "The type of authentication and authorisation in use",
          "enum": [
            "HYBRIDFLOW-JWKS"
          ]
        },
        "jwksEndpoint": {
          "description": "JWKS endpoint for private_key_jwt client auth with Data Recipient",
          "type": "string",
          "x-cds-type": "URIString"
        }
      }
    },
    "LinksPaginated": {
      "required": [
        "self"
      ],
      "type": "object",
      "properties": {
        "first": {
          "description": "URI to the first page of this set. Mandatory if this response is not the first page",
          "type": "string"
        },
        "last": {
          "description": "URI to the last page of this set. Mandatory if this response is not the last page",
          "type": "string"
        },
        "next": {
          "description": "URI to the next page of this set. Mandatory if this response is not the last page",
          "type": "string"
        },
        "prev": {
          "description": "URI to the previous page of this set. Mandatory if this response is not the first page",
          "type": "string"
        },
        "self": {
          "description": "Fully qualified link to this API call",
          "type": "string"
        }
      }
    },
    "MetaPaginated": {
      "required": [
        "totalPages",
        "totalRecords"
      ],
      "type": "object",
      "properties": {
        "totalPages": {
          "format": "int32",
          "description": "The total number of pages in the full set",
          "type": "integer"
        },
        "totalRecords": {
          "format": "int32",
          "description": "The total number of records in the full set",
          "type": "integer"
        }
      }
    },
    "ResponseErrorList": {
      "required": [
        "errors"
      ],
      "type": "object",
      "properties": {
        "errors": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Error": {
      "required": [
        "code",
        "title",
        "detail"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string"
        },
        "title": {
          "description": "Error title",
          "type": "string"
        },
        "detail": {
          "description": "Error detail",
          "type": "string"
        },
        "meta": {
          "description": "Optional additional data for specific error types",
          "type": "object"
        }
      }
    }
  },
  "tags": []
}